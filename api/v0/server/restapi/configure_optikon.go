// Code generated by go-swagger; DO NOT EDIT.

package restapi

import (
	"crypto/tls"
	"log"
	"net/http"

	errors "github.com/go-openapi/errors"
	runtime "github.com/go-openapi/runtime"
	"github.com/rs/cors"
	graceful "github.com/tylerb/graceful"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	"k8s.io/client-go/kubernetes"
	"k8s.io/client-go/tools/clientcmd"
	"k8s.io/cluster-registry/pkg/client/clientset_generated/clientset"

	"wwwin-github.cisco.com/edge/optikon-api/api/v0/handlers"
	"wwwin-github.cisco.com/edge/optikon-api/api/v0/server/config"
	"wwwin-github.cisco.com/edge/optikon-api/api/v0/server/restapi/operations"
)

// This file is safe to edit. Once it exists it will not be overwritten

//go:generate swagger generate server --target ../../server --name  --spec ../swagger.yaml --skip-models --exclude-main

func init() {
	config.Init()
}

func configureFlags(api *operations.OptikonAPI) {
	//api.CommandLineOptionsGroups = []swag.CommandLineOptionsGroup{}
}

func configureAPI(api *operations.OptikonAPI) http.Handler {
	// configure the api here
	api.ServeError = errors.ServeError

	// Set your custom logger if needed. Default one is log.Printf
	// Expected interface func(string, ...interface{})
	//
	// Example:
	// api.Logger = log.Printf

	api.JSONConsumer = runtime.JSONConsumer()

	api.JSONProducer = runtime.JSONProducer()

	api.ReleasesGetReleasesHandler = handlers.NewGetReleases()
	api.ReleasesAddReleasesHandler = handlers.NewAddRelease()
	api.ReleasesGetReleaseByIDHandler = handlers.NewGetReleaseByID()
	api.ReleasesUpdateReleaseHandler = handlers.NewUpdateRelease()
	api.ReleasesDeleteReleaseHandler = handlers.NewDeleteRelease()

	api.ClustersGetClustersHandler = handlers.NewGetClusters()
	api.ClustersAddClusterHandler = handlers.NewAddCluster()
	api.ClustersGetClusterByIDHandler = handlers.NewGetClusterByID()
	api.ClustersUpdateClusterHandler = handlers.NewUpdateCluster()
	api.ClustersDeleteClusterHandler = handlers.NewDeleteCluster()

	api.ServerShutdown = func() {}

	return setupGlobalMiddleware(api.Serve(setupMiddlewares))
}

// The TLS configuration before HTTPS server starts.
func configureTLS(tlsConfig *tls.Config) {
	// Make all necessary changes to the TLS configuration here.
}

// As soon as server is initialized but not run yet, this function will be called.
// If you need to modify a config, store server instance to stop it individually later, this is the place.
// This function can be called multiple times, depending on the number of serving schemes.
// scheme value will be set accordingly: "http", "https" or "unix"
func configureServer(s *graceful.Server, scheme, addr string) {
	if MockBasePath != "" {
		return
	}
	// Read in central kubeconfig
	cfg, err := clientcmd.BuildConfigFromFlags(CentralKubeAPIUrl, CentralKubeconfig)
	if err != nil {
		log.Fatalf("Error building kubeconfig: %s\n", err.Error())
	}
	kubeClient, err := kubernetes.NewForConfig(cfg)
	if err != nil {
		log.Fatalf("Error building kubernetes clientset: %s\n", err.Error())
	}

	// Verify that we can reach the central cluster
	pods, err := kubeClient.CoreV1().Pods("").List(metav1.ListOptions{})
	if err != nil {
		panic(err.Error())
	}
	log.Printf("Connected to central cluster- There are %d total pods\n", len(pods.Items))

	//  set up cluster registry client connection
	ClusterClient, err = clientset.NewForConfig(cfg)
	if err != nil {
		log.Fatalf("Error reaching cluster-registry API: %s\n", err.Error())
	}
	log.Println("Connected to central cluster registry")

}

// The middleware configuration is for the handler executors. These do not apply to the swagger.json document.
// The middleware executes after routing but before authentication, binding and validation
func setupMiddlewares(handler http.Handler) http.Handler {
	return handler
}

// The middleware configuration happens before anything, this middleware also applies to serving the swagger.json document.
// So this is a good place to plug in a panic handling middleware, logging and metrics
func setupGlobalMiddleware(handler http.Handler) http.Handler {
	corsHandler := cors.AllowAll()
	return corsHandler.Handler(handler)
}
