// Code generated by go-swagger; DO NOT EDIT.

package releases

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	strfmt "github.com/go-openapi/strfmt"

	"wwwin-github.cisco.com/edge/optikon-api/api/v0/models"
)

// NewUpdateReleaseParams creates a new UpdateReleaseParams object
// with the default values initialized.
func NewUpdateReleaseParams() UpdateReleaseParams {
	var ()
	return UpdateReleaseParams{}
}

// UpdateReleaseParams contains all the bound params for the update release operation
// typically these are obtained from a http.Request
//
// swagger:parameters updateRelease
type UpdateReleaseParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  In: body
	*/
	Body *models.ReleaseRelease
	/*ID of release to return
	  Required: true
	  In: path
	*/
	ReleaseID string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *UpdateReleaseParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body models.ReleaseRelease
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			res = append(res, errors.NewParseError("body", "body", "", err))
		} else {
			if err := body.Validate(route.Formats); err != nil {
				res = append(res, err)
			}

			if len(res) == 0 {
				o.Body = &body
			}
		}

	}

	rReleaseID, rhkReleaseID, _ := route.Params.GetOK("releaseId")
	if err := o.bindReleaseID(rReleaseID, rhkReleaseID, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateReleaseParams) bindReleaseID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	o.ReleaseID = raw

	return nil
}
