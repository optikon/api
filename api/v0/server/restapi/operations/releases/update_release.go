// Code generated by go-swagger; DO NOT EDIT.

package releases

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// UpdateReleaseHandlerFunc turns a function with the right signature into a update release handler
type UpdateReleaseHandlerFunc func(UpdateReleaseParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateReleaseHandlerFunc) Handle(params UpdateReleaseParams) middleware.Responder {
	return fn(params)
}

// UpdateReleaseHandler interface for that can handle valid update release params
type UpdateReleaseHandler interface {
	Handle(UpdateReleaseParams) middleware.Responder
}

// NewUpdateRelease creates a new http.Handler for the update release operation
func NewUpdateRelease(ctx *middleware.Context, handler UpdateReleaseHandler) *UpdateRelease {
	return &UpdateRelease{Context: ctx, Handler: handler}
}

/*UpdateRelease swagger:route PUT /releases/{releaseId} releases updateRelease

Update an existing release

*/
type UpdateRelease struct {
	Context *middleware.Context
	Handler UpdateReleaseHandler
}

func (o *UpdateRelease) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	rw.Header().Set("Access-Control-Allow-Origin", "*")
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateReleaseParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
