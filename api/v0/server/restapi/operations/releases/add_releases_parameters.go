// Code generated by go-swagger; DO NOT EDIT.

package releases

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"mime/multipart"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewAddReleasesParams creates a new AddReleasesParams object
// with the default values initialized.
func NewAddReleasesParams() AddReleasesParams {
	var ()
	return AddReleasesParams{}
}

// AddReleasesParams contains all the bound params for the add releases operation
// typically these are obtained from a http.Request
//
// swagger:parameters addReleases
type AddReleasesParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*The file to upload
	  Required: true
	  In: formData
	*/
	ChartTar runtime.File
	/*The node labels to identify applicable clusters
	  In: query
	*/
	Labels *string
	/*The name of the helm release
	  Required: true
	  In: formData
	*/
	Name string
	/*The kubernetes namespace to be used
	  Required: true
	  In: formData
	*/
	Namespace string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *AddReleasesParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	if err := r.ParseMultipartForm(32 << 20); err != nil {
		if err != http.ErrNotMultipart {
			return err
		} else if err := r.ParseForm(); err != nil {
			return err
		}
	}
	fds := runtime.Values(r.Form)

	chartTar, chartTarHeader, err := r.FormFile("chartTar")
	if err != nil {
		res = append(res, errors.New(400, "reading file %q failed: %v", "chartTar", err))
	} else if err := o.bindChartTar(chartTar, chartTarHeader); err != nil {
		res = append(res, err)
	} else {
		o.ChartTar = runtime.File{Data: chartTar, Header: chartTarHeader}
	}

	qLabels, qhkLabels, _ := qs.GetOK("labels")
	if err := o.bindLabels(qLabels, qhkLabels, route.Formats); err != nil {
		res = append(res, err)
	}

	fdName, fdhkName, _ := fds.GetOK("name")
	if err := o.bindName(fdName, fdhkName, route.Formats); err != nil {
		res = append(res, err)
	}

	fdNamespace, fdhkNamespace, _ := fds.GetOK("namespace")
	if err := o.bindNamespace(fdNamespace, fdhkNamespace, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AddReleasesParams) bindChartTar(file multipart.File, header *multipart.FileHeader) error {

	return nil
}

func (o *AddReleasesParams) bindLabels(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Labels = &raw

	return nil
}

func (o *AddReleasesParams) bindName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("name", "formData")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if err := validate.RequiredString("name", "formData", raw); err != nil {
		return err
	}

	o.Name = raw

	return nil
}

func (o *AddReleasesParams) bindNamespace(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("namespace", "formData")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if err := validate.RequiredString("namespace", "formData", raw); err != nil {
		return err
	}

	o.Namespace = raw

	return nil
}
