// Code generated by go-swagger; DO NOT EDIT.

package releases

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetReleaseByIDParams creates a new GetReleaseByIDParams object
// with the default values initialized.
func NewGetReleaseByIDParams() GetReleaseByIDParams {
	var ()
	return GetReleaseByIDParams{}
}

// GetReleaseByIDParams contains all the bound params for the get release by Id operation
// typically these are obtained from a http.Request
//
// swagger:parameters getReleaseById
type GetReleaseByIDParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*ID of release to return
	  Required: true
	  In: path
	*/
	ReleaseID string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *GetReleaseByIDParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	rReleaseID, rhkReleaseID, _ := route.Params.GetOK("releaseId")
	if err := o.bindReleaseID(rReleaseID, rhkReleaseID, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetReleaseByIDParams) bindReleaseID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	o.ReleaseID = raw

	return nil
}
