// Code generated by go-swagger; DO NOT EDIT.

package releases

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetReleaseByIDHandlerFunc turns a function with the right signature into a get release by Id handler
type GetReleaseByIDHandlerFunc func(GetReleaseByIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetReleaseByIDHandlerFunc) Handle(params GetReleaseByIDParams) middleware.Responder {
	return fn(params)
}

// GetReleaseByIDHandler interface for that can handle valid get release by Id params
type GetReleaseByIDHandler interface {
	Handle(GetReleaseByIDParams) middleware.Responder
}

// NewGetReleaseByID creates a new http.Handler for the get release by Id operation
func NewGetReleaseByID(ctx *middleware.Context, handler GetReleaseByIDHandler) *GetReleaseByID {
	return &GetReleaseByID{Context: ctx, Handler: handler}
}

/*GetReleaseByID swagger:route GET /releases/{releaseId} releases getReleaseById

Find release by ID

Returns a single release

*/
type GetReleaseByID struct {
	Context *middleware.Context
	Handler GetReleaseByIDHandler
}

func (o *GetReleaseByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetReleaseByIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
