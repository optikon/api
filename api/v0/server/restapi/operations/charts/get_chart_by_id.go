// Code generated by go-swagger; DO NOT EDIT.

package charts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetChartByIDHandlerFunc turns a function with the right signature into a get chart by Id handler
type GetChartByIDHandlerFunc func(GetChartByIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetChartByIDHandlerFunc) Handle(params GetChartByIDParams) middleware.Responder {
	return fn(params)
}

// GetChartByIDHandler interface for that can handle valid get chart by Id params
type GetChartByIDHandler interface {
	Handle(GetChartByIDParams) middleware.Responder
}

// NewGetChartByID creates a new http.Handler for the get chart by Id operation
func NewGetChartByID(ctx *middleware.Context, handler GetChartByIDHandler) *GetChartByID {
	return &GetChartByID{Context: ctx, Handler: handler}
}

/*GetChartByID swagger:route GET /charts/{chartId} charts getChartById

Find chart by ID

Returns a single chart

*/
type GetChartByID struct {
	Context *middleware.Context
	Handler GetChartByIDHandler
}

func (o *GetChartByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetChartByIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
