// Code generated by go-swagger; DO NOT EDIT.

package charts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// UpdateChartHandlerFunc turns a function with the right signature into a update chart handler
type UpdateChartHandlerFunc func(UpdateChartParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateChartHandlerFunc) Handle(params UpdateChartParams) middleware.Responder {
	return fn(params)
}

// UpdateChartHandler interface for that can handle valid update chart params
type UpdateChartHandler interface {
	Handle(UpdateChartParams) middleware.Responder
}

// NewUpdateChart creates a new http.Handler for the update chart operation
func NewUpdateChart(ctx *middleware.Context, handler UpdateChartHandler) *UpdateChart {
	return &UpdateChart{Context: ctx, Handler: handler}
}

/*UpdateChart swagger:route PUT /charts/{chartId} charts updateChart

Update an existing chart

*/
type UpdateChart struct {
	Context *middleware.Context
	Handler UpdateChartHandler
}

func (o *UpdateChart) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateChartParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
