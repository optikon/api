// Code generated by go-swagger; DO NOT EDIT.

package releases

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"os"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewAddReleasesParams creates a new AddReleasesParams object
// with the default values initialized.
func NewAddReleasesParams() *AddReleasesParams {
	var ()
	return &AddReleasesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAddReleasesParamsWithTimeout creates a new AddReleasesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAddReleasesParamsWithTimeout(timeout time.Duration) *AddReleasesParams {
	var ()
	return &AddReleasesParams{

		timeout: timeout,
	}
}

// NewAddReleasesParamsWithContext creates a new AddReleasesParams object
// with the default values initialized, and the ability to set a context for a request
func NewAddReleasesParamsWithContext(ctx context.Context) *AddReleasesParams {
	var ()
	return &AddReleasesParams{

		Context: ctx,
	}
}

// NewAddReleasesParamsWithHTTPClient creates a new AddReleasesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAddReleasesParamsWithHTTPClient(client *http.Client) *AddReleasesParams {
	var ()
	return &AddReleasesParams{
		HTTPClient: client,
	}
}

/*AddReleasesParams contains all the parameters to send to the API endpoint
for the add releases operation typically these are written to a http.Request
*/
type AddReleasesParams struct {

	/*ChartTar
	  The file to upload

	*/
	ChartTar os.File
	/*Labels
	  The node labels to identify applicable clusters

	*/
	Labels *string
	/*Name
	  The name of the helm release

	*/
	Name string
	/*Namespace
	  The kubernetes namespace to be used

	*/
	Namespace string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the add releases params
func (o *AddReleasesParams) WithTimeout(timeout time.Duration) *AddReleasesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the add releases params
func (o *AddReleasesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the add releases params
func (o *AddReleasesParams) WithContext(ctx context.Context) *AddReleasesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the add releases params
func (o *AddReleasesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the add releases params
func (o *AddReleasesParams) WithHTTPClient(client *http.Client) *AddReleasesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the add releases params
func (o *AddReleasesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithChartTar adds the chartTar to the add releases params
func (o *AddReleasesParams) WithChartTar(chartTar os.File) *AddReleasesParams {
	o.SetChartTar(chartTar)
	return o
}

// SetChartTar adds the chartTar to the add releases params
func (o *AddReleasesParams) SetChartTar(chartTar os.File) {
	o.ChartTar = chartTar
}

// WithLabels adds the labels to the add releases params
func (o *AddReleasesParams) WithLabels(labels *string) *AddReleasesParams {
	o.SetLabels(labels)
	return o
}

// SetLabels adds the labels to the add releases params
func (o *AddReleasesParams) SetLabels(labels *string) {
	o.Labels = labels
}

// WithName adds the name to the add releases params
func (o *AddReleasesParams) WithName(name string) *AddReleasesParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the add releases params
func (o *AddReleasesParams) SetName(name string) {
	o.Name = name
}

// WithNamespace adds the namespace to the add releases params
func (o *AddReleasesParams) WithNamespace(namespace string) *AddReleasesParams {
	o.SetNamespace(namespace)
	return o
}

// SetNamespace adds the namespace to the add releases params
func (o *AddReleasesParams) SetNamespace(namespace string) {
	o.Namespace = namespace
}

// WriteToRequest writes these params to a swagger request
func (o *AddReleasesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// form file param chartTar
	if err := r.SetFileParam("chartTar", &o.ChartTar); err != nil {
		return err
	}

	if o.Labels != nil {

		// query param labels
		var qrLabels string
		if o.Labels != nil {
			qrLabels = *o.Labels
		}
		qLabels := qrLabels
		if qLabels != "" {
			if err := r.SetQueryParam("labels", qLabels); err != nil {
				return err
			}
		}

	}

	// form param name
	frName := o.Name
	fName := frName
	if fName != "" {
		if err := r.SetFormParam("name", fName); err != nil {
			return err
		}
	}

	// form param namespace
	frNamespace := o.Namespace
	fNamespace := frNamespace
	if fNamespace != "" {
		if err := r.SetFormParam("namespace", fNamespace); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
