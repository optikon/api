// Code generated by go-swagger; DO NOT EDIT.

package releases

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"wwwin-github.cisco.com/edge/optikon-api/api/v0/models"
)

// UpdateReleaseReader is a Reader for the UpdateRelease structure.
type UpdateReleaseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateReleaseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateReleaseOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUpdateReleaseBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewUpdateReleaseUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUpdateReleaseNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewUpdateReleaseInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateReleaseOK creates a UpdateReleaseOK with default headers values
func NewUpdateReleaseOK() *UpdateReleaseOK {
	return &UpdateReleaseOK{}
}

/*UpdateReleaseOK handles this case with default header values.

OK
*/
type UpdateReleaseOK struct {
}

func (o *UpdateReleaseOK) Error() string {
	return fmt.Sprintf("[PUT /releases/{releaseId}][%d] updateReleaseOK ", 200)
}

func (o *UpdateReleaseOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateReleaseBadRequest creates a UpdateReleaseBadRequest with default headers values
func NewUpdateReleaseBadRequest() *UpdateReleaseBadRequest {
	return &UpdateReleaseBadRequest{}
}

/*UpdateReleaseBadRequest handles this case with default header values.

Bad Request
*/
type UpdateReleaseBadRequest struct {
	Payload *models.APIResponse
}

func (o *UpdateReleaseBadRequest) Error() string {
	return fmt.Sprintf("[PUT /releases/{releaseId}][%d] updateReleaseBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateReleaseBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateReleaseUnauthorized creates a UpdateReleaseUnauthorized with default headers values
func NewUpdateReleaseUnauthorized() *UpdateReleaseUnauthorized {
	return &UpdateReleaseUnauthorized{}
}

/*UpdateReleaseUnauthorized handles this case with default header values.

Unauthorized
*/
type UpdateReleaseUnauthorized struct {
	Payload *models.APIResponse
}

func (o *UpdateReleaseUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /releases/{releaseId}][%d] updateReleaseUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateReleaseUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateReleaseNotFound creates a UpdateReleaseNotFound with default headers values
func NewUpdateReleaseNotFound() *UpdateReleaseNotFound {
	return &UpdateReleaseNotFound{}
}

/*UpdateReleaseNotFound handles this case with default header values.

The specified resource was not found
*/
type UpdateReleaseNotFound struct {
	Payload *models.APIResponse
}

func (o *UpdateReleaseNotFound) Error() string {
	return fmt.Sprintf("[PUT /releases/{releaseId}][%d] updateReleaseNotFound  %+v", 404, o.Payload)
}

func (o *UpdateReleaseNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateReleaseInternalServerError creates a UpdateReleaseInternalServerError with default headers values
func NewUpdateReleaseInternalServerError() *UpdateReleaseInternalServerError {
	return &UpdateReleaseInternalServerError{}
}

/*UpdateReleaseInternalServerError handles this case with default header values.

Internal Server Error
*/
type UpdateReleaseInternalServerError struct {
	Payload *models.APIResponse
}

func (o *UpdateReleaseInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /releases/{releaseId}][%d] updateReleaseInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateReleaseInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.APIResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
