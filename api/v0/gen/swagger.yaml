swagger: "2.0"
info:
  description: "Optikon is an edge computing API for Kubernetes. It exposes Helm and the cluster registry for a comprehensive UI"
  version: "0.0.1"
  title: "Optikon"
  contact:
    email: "stelouie@cisco.com"
basePath: "/v0"
tags:
- name: "clusters"
  description: "Everything about your clusters"
  externalDocs:
    description: "Cluster Registry v0.0.3"
    url: "https://github.com/kubernetes/cluster-registry/tree/v0.0.3"
- name: "charts"
  description: "Access to all helm charts"
  externalDocs:
    description: "Helm v2.8.2"
    url: "https://github.com/kubernetes/helm/tree/v2.8.2"
schemes:
- "http"
- "https"
paths:
  /clusters:
    get:
      tags:
      - "clusters"
      summary: "Returns all clusters"
      description: "Returns a list of clusters"
      operationId: "getClusters"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/io.k8s.cluster-registry.pkg.apis.clusterregistry.v1alpha1.Cluster'
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorized"
        500:
          $ref: "#/responses/InternalServerError"
    post:
      tags:
      - "clusters"
      summary: "Add a new cluster to optikon"
      description: ""
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/io.k8s.cluster-registry.pkg.apis.clusterregistry.v1alpha1.Cluster"
      operationId: "addCluster"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        201:
          $ref: "#/responses/Created"
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorized"
        500:
          $ref: "#/responses/InternalServerError"
  /clusters/{clusterId}:
    get:
      tags:
      - "clusters"
      summary: "Find cluster by ID"
      description: "Returns a single cluster"
      operationId: "getClusterById"
      produces:
      - "application/json"
      parameters:
      - name: "clusterId"
        in: "path"
        description: "ID of cluster to return"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "object"
            $ref: '#/definitions/io.k8s.cluster-registry.pkg.apis.clusterregistry.v1alpha1.Cluster'
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/InternalServerError"
    put:
      tags:
      - "clusters"
      summary: "Update an existing cluster"
      description: ""
      operationId: "updateCluster"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "clusterId"
        in: "path"
        description: "Cluster id to update"
        required: true
        type: "string"
      - name: body
        in: body
        schema:
          $ref: "#/definitions/io.k8s.cluster-registry.pkg.apis.clusterregistry.v1alpha1.Cluster"
      responses:
        200:
          description: "OK"
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/InternalServerError"
    delete:
      tags:
      - "clusters"
      summary: "Deletes a cluster"
      description: ""
      operationId: "deleteCluster"
      produces:
      - "application/json"
      parameters:
      - name: "clusterId"
        in: "path"
        description: "Cluster id to delete"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/InternalServerError"
  /charts:
    get:
      tags:
      - "charts"
      summary: "Returns all charts"
      description: "Returns a list of charts"
      operationId: "getCharts"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            type: array
            items:
              $ref: '#/definitions/chart.Chart'
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorized"
        500:
          $ref: "#/responses/InternalServerError"
    post:
      tags:
      - "charts"
      summary: "Add a new cluster to optikon"
      description: ""
      operationId: "addCharts"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/chart.Chart"
      responses:
        201:
          $ref: "#/responses/Created"
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorized"
        500:
          $ref: "#/responses/InternalServerError"
  /charts/{chartId}:
    get:
      tags:
      - "charts"
      summary: "Find chart by ID"
      description: "Returns a single chart"
      operationId: "getChartById"
      produces:
      - "application/json"
      parameters:
      - name: "chartId"
        in: "path"
        description: "ID of chart to return"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
          schema:
            type: "object"
            $ref: "#/definitions/chart.Chart"
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/InternalServerError"
    put:
      tags:
      - "charts"
      summary: "Update an existing chart"
      description: ""
      operationId: "updateChart"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "chartId"
        in: "path"
        description: "ID of chart to return"
        required: true
        type: "string"
      - name: body
        in: body
        schema:
          $ref: "#/definitions/chart.Chart"
      responses:
        200:
          description: "OK"
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/InternalServerError"
    delete:
      tags:
      - "charts"
      summary: "Delete chart by ID"
      operationId: "deleteChart"
      produces:
      - "application/json"
      parameters:
      - name: "chartId"
        in: "path"
        description: "ID of chart to return"
        required: true
        type: "string"
      responses:
        200:
          description: "OK"
        400:
          $ref: "#/responses/BadRequest"
        401:
          $ref: "#/responses/Unauthorized"
        404:
          $ref: "#/responses/NotFound"
        500:
          $ref: "#/responses/InternalServerError"
definitions:
  io.k8s.cluster-registry.pkg.apis.clusterregistry.v1alpha1.Cluster:
    description: Cluster contains information about a cluster in a cluster registry.
    properties:
      apiVersion:
        description: >-
          APIVersion defines the versioned schema of this representation of an
          object. Servers should convert recognized schemas to the latest
          internal value, and may reject unrecognized values. More info:
          https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
        type: string
      kind:
        description: >-
          Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client
          submits requests to. Cannot be updated. In CamelCase. More info:
          https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
        type: string
      metadata:
        description: >-
          Standard object's metadata. More info:
          https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta'
      spec:
        description: >-
          Spec is the specification of the cluster. This may or may not be
          reconciled by an active controller.
        $ref: >-
          #/definitions/io.k8s.cluster-registry.pkg.apis.clusterregistry.v1alpha1.ClusterSpec
      status:
        description: >-
          Status is the status of the cluster. It is optional, and can be left
          nil to imply that the cluster status is not being reported.
        $ref: >-
          #/definitions/io.k8s.cluster-registry.pkg.apis.clusterregistry.v1alpha1.ClusterStatus
    x-kubernetes-group-version-kind:
      - group: clusterregistry.k8s.io
        version: v1alpha1
        kind: Cluster
  io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta:
    description: >-
      ObjectMeta is metadata that all persisted resources must have, which
      includes all objects users must create.
    properties:
      annotations:
        description: >-
          Annotations is an unstructured key value map stored with a resource
          that may be set by external tools to store and retrieve arbitrary
          metadata. They are not queryable and should be preserved when
          modifying objects. More info:
          http://kubernetes.io/docs/user-guide/annotations
        type: object
        additionalProperties:
          type: string
      clusterName:
        description: >-
          The name of the cluster which the object belongs to. This is used to
          distinguish resources with same name and namespace in different
          clusters. This field is not set anywhere right now and apiserver is
          going to ignore it if set in create or update request.
        type: string
      creationTimestamp:
        description: >-
          CreationTimestamp is a timestamp representing the server time when
          this object was created. It is not guaranteed to be set in
          happens-before order across separate operations. Clients may not set
          this value. It is represented in RFC3339 form and is in UTC.


          Populated by the system. Read-only. Null for lists. More info:
          https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
      deletionGracePeriodSeconds:
        description: >-
          Number of seconds allowed for this object to gracefully terminate
          before it will be removed from the system. Only set when
          deletionTimestamp is also set. May only be shortened. Read-only.
        type: integer
        format: int64
      deletionTimestamp:
        description: >-
          DeletionTimestamp is RFC 3339 date and time at which this resource
          will be deleted. This field is set by the server when a graceful
          deletion is requested by the user, and is not directly settable by a
          client. The resource is expected to be deleted (no longer visible from
          resource lists, and not reachable by name) after the time in this
          field. Once set, this value may not be unset or be set further into
          the future, although it may be shortened or the resource may be
          deleted prior to this time. For example, a user may request that a pod
          is deleted in 30 seconds. The Kubelet will react by sending a graceful
          termination signal to the containers in the pod. After that 30
          seconds, the Kubelet will send a hard termination signal (SIGKILL) to
          the container and after cleanup, remove the pod from the API. In the
          presence of network partitions, this object may still exist after this
          timestamp, until an administrator or automated process can determine
          the resource is fully terminated. If not set, graceful deletion of the
          object has not been requested.


          Populated by the system when a graceful deletion is requested.
          Read-only. More info:
          https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
      finalizers:
        description: >-
          Must be empty before the object is deleted from the registry. Each
          entry is an identifier for the responsible component that will remove
          the entry from the list. If the deletionTimestamp of the object is
          non-nil, entries in this list can only be removed.
        type: array
        items:
          type: string
        x-kubernetes-patch-strategy: merge
      generateName:
        description: >-
          GenerateName is an optional prefix, used by the server, to generate a
          unique name ONLY IF the Name field has not been provided. If this
          field is used, the name returned to the client will be different than
          the name passed. This value will also be combined with a unique
          suffix. The provided value has the same validation rules as the Name
          field, and may be truncated by the length of the suffix required to
          make the value unique on the server.


          If this field is specified and the generated name exists, the server
          will NOT return a 409 - instead, it will either return 201 Created or
          500 with Reason ServerTimeout indicating a unique name could not be
          found in the time allotted, and the client should retry (optionally
          after the time indicated in the Retry-After header).


          Applied only if Name is not specified. More info:
          https://git.k8s.io/community/contributors/devel/api-conventions.md#idempotency
        type: string
      generation:
        description: >-
          A sequence number representing a specific generation of the desired
          state. Populated by the system. Read-only.
        type: integer
        format: int64
      initializers:
        description: >-
          An initializer is a controller which enforces some system invariant at
          object creation time. This field is a list of initializers that have
          not yet acted on this object. If nil or empty, this object has been
          completely initialized. Otherwise, the object is considered
          uninitialized and is hidden (in list/watch and get calls) from clients
          that haven't explicitly asked to observe uninitialized objects.


          When an object is created, the system will populate this list with the
          current set of initializers. Only privileged users may set or modify
          this list. Once it is empty, it may not be modified further by any
          user.
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Initializers'
      labels:
        description: >-
          Map of string keys and values that can be used to organize and
          categorize (scope and select) objects. May match selectors of
          replication controllers and services. More info:
          http://kubernetes.io/docs/user-guide/labels
        type: object
        additionalProperties:
          type: string
      name:
        description: >-
          Name must be unique within a namespace. Is required when creating
          resources, although some resources may allow a client to request the
          generation of an appropriate name automatically. Name is primarily
          intended for creation idempotence and configuration definition. Cannot
          be updated. More info:
          http://kubernetes.io/docs/user-guide/identifiers#names
        type: string
      namespace:
        description: >-
          Namespace defines the space within each name must be unique. An empty
          namespace is equivalent to the "default" namespace, but "default" is
          the canonical representation. Not all objects are required to be
          scoped to a namespace - the value of this field for those objects will
          be empty.


          Must be a DNS_LABEL. Cannot be updated. More info:
          http://kubernetes.io/docs/user-guide/namespaces
        type: string
      ownerReferences:
        description: >-
          List of objects depended by this object. If ALL objects in the list
          have been deleted, this object will be garbage collected. If this
          object is managed by a controller, then an entry in this list will
          point to this controller, with the controller field set to true. There
          cannot be more than one managing controller.
        type: array
        items:
          $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference'
        x-kubernetes-patch-merge-key: uid
        x-kubernetes-patch-strategy: merge
      resourceVersion:
        description: >-
          An opaque value that represents the internal version of this object
          that can be used by clients to determine when objects have changed.
          May be used for optimistic concurrency, change detection, and the
          watch operation on a resource or set of resources. Clients must treat
          these values as opaque and passed unmodified back to the server. They
          may only be valid for a particular resource or set of resources.


          Populated by the system. Read-only. Value must be treated as opaque by
          clients and . More info:
          https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency
        type: string
      selfLink:
        description: >-
          SelfLink is a URL representing this object. Populated by the system.
          Read-only.
        type: string
      uid:
        description: >-
          UID is the unique in time and space value for this object. It is
          typically generated by the server on successful creation of a resource
          and is not allowed to change on PUT operations.


          Populated by the system. Read-only. More info:
          http://kubernetes.io/docs/user-guide/identifiers#uids
        type: string
  io.k8s.cluster-registry.pkg.apis.clusterregistry.v1alpha1.ClusterSpec:
    description: ClusterSpec contains the specification of a cluster.
    properties:
      authInfo:
        description: >-
          AuthInfo contains public information that can be used to authenticate
          to and authorize with this cluster. It is not meant to store private
          information (e.g., tokens or client certificates) and cluster registry
          implementations are not expected to provide hardened storage for
          secrets.
        $ref: >-
          #/definitions/io.k8s.cluster-registry.pkg.apis.clusterregistry.v1alpha1.AuthInfo
      kubernetesApiEndpoints:
        description: >-
          KubernetesAPIEndpoints represents the endpoints of the API server for
          this cluster.
        $ref: >-
          #/definitions/io.k8s.cluster-registry.pkg.apis.clusterregistry.v1alpha1.KubernetesAPIEndpoints
  io.k8s.cluster-registry.pkg.apis.clusterregistry.v1alpha1.ClusterStatus:
    description: ClusterStatus contains the status of a cluster.
  io.k8s.cluster-registry.pkg.apis.clusterregistry.v1alpha1.KubernetesAPIEndpoints:
    description: >-
      KubernetesAPIEndpoints represents the endpoints for one and only one
      Kubernetes API server.
    properties:
      caBundle:
        description: CABundle contains the certificate authority information.
        type: string
        format: byte
      serverEndpoints:
        description: >-
          ServerEndpoints specifies the address(es) of the Kubernetes API
          server’s network identity or identities.
        type: array
        items:
          $ref: >-
            #/definitions/io.k8s.cluster-registry.pkg.apis.clusterregistry.v1alpha1.ServerAddressByClientCIDR
  io.k8s.apimachinery.pkg.apis.meta.v1.Time:
    type: string
    format: date-time
  io.k8s.apimachinery.pkg.apis.meta.v1.Initializers:
    description: Initializers tracks the progress of initialization.
    required:
      - pending
    properties:
      pending:
        description: >-
          Pending is a list of initializers that must execute in order before
          this object is visible. When the last pending initializer is removed,
          and no failing result is set, the initializers struct will be set to
          nil and the object is considered as initialized and visible to all
          clients.
        type: array
        items:
          $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Initializer'
        x-kubernetes-patch-merge-key: name
        x-kubernetes-patch-strategy: merge
      result:
        description: >-
          If result is set with the Failure field, the object will be persisted
          to storage and then deleted, ensuring that other clients can observe
          the deletion.
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
  io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference:
    description: >-
      OwnerReference contains enough information to let you identify an owning
      object. Currently, an owning object must be in the same namespace, so
      there is no namespace field.
    required:
      - apiVersion
      - kind
      - name
      - uid
    properties:
      apiVersion:
        description: API version of the referent.
        type: string
      blockOwnerDeletion:
        description: >-
          If true, AND if the owner has the "foregroundDeletion" finalizer, then
          the owner cannot be deleted from the key-value store until this
          reference is removed. Defaults to false. To set this field, a user
          needs "delete" permission of the owner, otherwise 422 (Unprocessable
          Entity) will be returned.
        type: boolean
      controller:
        description: 'If true, this reference points to the managing controller.'
        type: boolean
      kind:
        description: >-
          Kind of the referent. More info:
          https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
        type: string
      name:
        description: >-
          Name of the referent. More info:
          http://kubernetes.io/docs/user-guide/identifiers#names
        type: string
      uid:
        description: >-
          UID of the referent. More info:
          http://kubernetes.io/docs/user-guide/identifiers#uids
        type: string
  io.k8s.cluster-registry.pkg.apis.clusterregistry.v1alpha1.AuthInfo:
    description: >-
      AuthInfo holds public information that describes how a client can get
      credentials to access the cluster. For example, OAuth2 client registration
      endpoints and supported flows, or Kerberos servers locations.


      It should not hold any private or sensitive information.
    properties:
      providers:
        description: AuthProviders is a list of configurations for auth providers.
        type: array
        items:
          $ref: >-
            #/definitions/io.k8s.cluster-registry.pkg.apis.clusterregistry.v1alpha1.AuthProviderConfig
  io.k8s.cluster-registry.pkg.apis.clusterregistry.v1alpha1.AuthProviderConfig:
    description: >-
      AuthProviderConfig contains the information necessary for a client to
      authenticate to a Kubernetes API server. It is modeled after
      k8s.io/client-go/tools/clientcmd/api/v1.AuthProviderConfig.
    properties:
      config:
        description: >-
          Config is a map of values that contains the information necessary for
          a client to determine how to authenticate to a Kubernetes API server.
        type: object
        additionalProperties:
          type: string
      name:
        description: Name is the name of this configuration.
        type: string
      type:
        description: >-
          Type contains type information about this auth provider. Clients of
          the cluster registry should use this field to differentiate between
          different kinds of authentication providers.
        $ref: >-
          #/definitions/io.k8s.cluster-registry.pkg.apis.clusterregistry.v1alpha1.AuthProviderType
  io.k8s.cluster-registry.pkg.apis.clusterregistry.v1alpha1.AuthProviderType:
    description: >-
      AuthProviderType contains metadata about the auth provider. It should be
      used by clients to differentiate between different kinds of auth
      providers, and to select a relevant provider for the client's
      configuration. For example, a controller would look for a provider type
      that denotes a service account that it should use to access the cluster,
      whereas a user would look for a provider type that denotes an
      authentication system from which they should request a token.
    properties:
      name:
        description: Name is the name of the auth provider.
        type: string
  io.k8s.cluster-registry.pkg.apis.clusterregistry.v1alpha1.ServerAddressByClientCIDR:
    description: >-
      ServerAddressByClientCIDR helps clients determine the server address that
      they should use, depending on the ClientCIDR that they match.
    properties:
      clientCIDR:
        description: >-
          The CIDR with which clients can match their IP to figure out if they
          should use the corresponding server address.
        type: string
      serverAddress:
        description: >-
          Address of this server, suitable for a client that matches the above
          CIDR. This can be a hostname, hostname:port, IP or IP:port.
        type: string
  io.k8s.apimachinery.pkg.apis.meta.v1.Initializer:
    description: >-
      Initializer is information about an initializer that has not yet
      completed.
    required:
      - name
    properties:
      name:
        description: name of the process that is responsible for initializing this object.
        type: string
  io.k8s.apimachinery.pkg.apis.meta.v1.Status:
    description: Status is a return value for calls that don't return other objects.
    properties:
      apiVersion:
        description: >-
          APIVersion defines the versioned schema of this representation of an
          object. Servers should convert recognized schemas to the latest
          internal value, and may reject unrecognized values. More info:
          https://git.k8s.io/community/contributors/devel/api-conventions.md#resources
        type: string
      code:
        description: 'Suggested HTTP return code for this status, 0 if not set.'
        type: integer
        format: int32
      details:
        description: >-
          Extended data associated with the reason.  Each reason may define its
          own extended details. This field is optional and the data returned is
          not guaranteed to conform to any schema except that defined by the
          reason type.
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.StatusDetails'
      kind:
        description: >-
          Kind is a string value representing the REST resource this object
          represents. Servers may infer this from the endpoint the client
          submits requests to. Cannot be updated. In CamelCase. More info:
          https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
        type: string
      message:
        description: A human-readable description of the status of this operation.
        type: string
      metadata:
        description: >-
          Standard list metadata. More info:
          https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
      reason:
        description: >-
          A machine-readable description of why this operation is in the
          "Failure" status. If this value is empty there is no information
          available. A Reason clarifies an HTTP status code but does not
          override it.
        type: string
      status:
        description: >-
          Status of the operation. One of: "Success" or "Failure". More info:
          https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
        type: string
    x-kubernetes-group-version-kind:
      - group: ''
        version: v1
        kind: Status
  io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta:
    description: >-
      ListMeta describes metadata that synthetic resources must have, including
      lists and various status objects. A resource may have only one of
      {ObjectMeta, ListMeta}.
    properties:
      continue:
        description: >-
          continue may be set if the user set a limit on the number of items
          returned, and indicates that the server has more data available. The
          value is opaque and may be used to issue another request to the
          endpoint that served this list to retrieve the next set of available
          objects. Continuing a list may not be possible if the server
          configuration has changed or more than a few minutes have passed. The
          resourceVersion field returned when using this continue value will be
          identical to the value in the first response.
        type: string
      resourceVersion:
        description: >-
          String that identifies the server's internal version of this object
          that can be used by clients to determine when objects have changed.
          Value must be treated as opaque by clients and passed unmodified back
          to the server. Populated by the system. Read-only. More info:
          https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency
        type: string
      selfLink:
        description: >-
          selfLink is a URL representing this object. Populated by the system.
          Read-only.
        type: string
  io.k8s.apimachinery.pkg.apis.meta.v1.StatusCause:
    description: >-
      StatusCause provides more information about an api.Status failure,
      including cases when multiple errors are encountered.
    properties:
      field:
        description: >-
          The field of the resource that has caused this error, as named by its
          JSON serialization. May include dot and postfix notation for nested
          attributes. Arrays are zero-indexed.  Fields may appear more than once
          in an array of causes due to fields having multiple errors. Optional.


          Examples:
            "name" - the field "name" on the current resource
            "items[0].name" - the field "name" on the first array entry in "items"
        type: string
      message:
        description: >-
          A human-readable description of the cause of the error.  This field
          may be presented as-is to a reader.
        type: string
      reason:
        description: >-
          A machine-readable description of the cause of the error. If this
          value is empty there is no information available.
        type: string
  io.k8s.apimachinery.pkg.apis.meta.v1.StatusDetails:
    description: >-
      StatusDetails is a set of additional properties that MAY be set by the
      server to provide additional information about a response. The Reason
      field of a Status object defines what attributes will be set. Clients must
      ignore fields that do not match the defined type of each attribute, and
      should assume that any attribute may be empty, invalid, or under defined.
    properties:
      causes:
        description: >-
          The Causes array includes more details associated with the
          StatusReason failure. Not all StatusReasons may provide detailed
          causes.
        type: array
        items:
          $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.StatusCause'
      group:
        description: >-
          The group attribute of the resource associated with the status
          StatusReason.
        type: string
      kind:
        description: >-
          The kind attribute of the resource associated with the status
          StatusReason. On some operations may differ from the requested
          resource Kind. More info:
          https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds
        type: string
      name:
        description: >-
          The name attribute of the resource associated with the status
          StatusReason (when there is a single name which can be described).
        type: string
      retryAfterSeconds:
        description: >-
          If specified, the time in seconds before the operation should be
          retried. Some errors may indicate the client must take an alternate
          action - for those errors this field may indicate how long to wait
          before taking the alternate action.
        type: integer
        format: int32
      uid:
        description: >-
          UID of the resource. (when there is a single resource which can be
          described). More info:
          http://kubernetes.io/docs/user-guide/identifiers#uids
        type: string
  chart.Chart:
    type: "object"
    properties:
      Name:
        type: "string"
      Metadata:
        $ref: >-
          #/definitions/chart.Metadata
      Template:
        $ref: >-
          #/definitions/chart.Template
      Dependencies:
        $ref: >-
          #/definitions/chart.Dependencies
      Config:
        $ref: >-
          #/definitions/chart.Config
      Files:
        $ref: >-
          #/definitions/chart.Files
  chart.Metadata:
    type: "object"
    properties:
      Name:
        type: "string"
      Home:
        type: "string"
      Sources:
        type: "string"
      Description:
        type: "string"
      Keywords:
        type: "array"
        items:
          type: "string"
      Maintainer:
        $ref: >-
          #/definitions/chart.Maintainer
      Engine:
        type: "string"
      Icon:
        type: "string"
      ApiVersion:
        type: "string"
      Tags:
        type: "string"
      AppVersion:
        type: "string"
      Deprecated:
        type: "boolean"
      TillerVersion:
        type: "string"
      Annotations:
        type: "object"
        properties:
          Key:
            type: "string"
          Value:
            type: "string"
      KubeVersion:
        type: "string"
  chart.Maintainer:
    type: "object"
    properties:
      Name:
        type: "string"
      Email:
        type: "string"
      Url:
        type: "string"
  chart.Template:
    type: "object"
    properties:
      Name:
        type: "string"
      Data:
        type: "string"
        format: byte
  chart.Dependencies:
    type: "object"
    properties:
      Name:
        type: "string"
      Repository:
        type: "string"
      Version:
        type: "string"
      Alias:
        type: "string"
      Condition:
        type: "string"
      Tags:
        type: "array"
        items:
          type: "string"
  chart.Config:
    type: "object"
    properties:
      Raw:
        type: "string"
      Values:
        type: "object"
        properties:
          Key:
            type: "string"
          Value:
            type: "string"
  chart.Files:
    type: "object"
    properties:
      Key:
        type: "string"
      Value:
        type: "string"
        format: "byte"
  APIResponse:
    type: "object"
    properties:
      code:
        type: "string"
      message:
        type: "string"
    required:
      - code
      - message
responses:
  Created:
    description: "Created"
    schema:
      $ref: "#/definitions/APIResponse"
  NotFound:
    description: "The specified resource was not found"
    schema:
      $ref: "#/definitions/APIResponse"
  Unauthorized:
    description: "Unauthorized"
    schema:
      $ref: "#/definitions/APIResponse"
  BadRequest:
    description: "Bad Request"
    schema:
      $ref: "#/definitions/APIResponse"
  ServiceUnavailable:
    description: "Service Unavailable"
    schema:
      $ref: "#/definitions/APIResponse"
  InternalServerError:
    description: "Internal Server Error"
    schema:
      $ref: "#/definitions/APIResponse"
