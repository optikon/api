// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ChartChart chart chart
// swagger:model chart.Chart
type ChartChart struct {

	// config
	Config *ChartConfig `json:"Config,omitempty"`

	// dependencies
	Dependencies *ChartDependencies `json:"Dependencies,omitempty"`

	// files
	Files *ChartFiles `json:"Files,omitempty"`

	// metadata
	Metadata *ChartMetadata `json:"Metadata,omitempty"`

	// name
	Name string `json:"Name,omitempty"`

	// template
	Template *ChartTemplate `json:"Template,omitempty"`
}

// Validate validates this chart chart
func (m *ChartChart) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfig(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDependencies(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFiles(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMetadata(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTemplate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChartChart) validateConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.Config) { // not required
		return nil
	}

	if m.Config != nil {

		if err := m.Config.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Config")
			}
			return err
		}
	}

	return nil
}

func (m *ChartChart) validateDependencies(formats strfmt.Registry) error {

	if swag.IsZero(m.Dependencies) { // not required
		return nil
	}

	if m.Dependencies != nil {

		if err := m.Dependencies.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Dependencies")
			}
			return err
		}
	}

	return nil
}

func (m *ChartChart) validateFiles(formats strfmt.Registry) error {

	if swag.IsZero(m.Files) { // not required
		return nil
	}

	if m.Files != nil {

		if err := m.Files.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Files")
			}
			return err
		}
	}

	return nil
}

func (m *ChartChart) validateMetadata(formats strfmt.Registry) error {

	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	if m.Metadata != nil {

		if err := m.Metadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Metadata")
			}
			return err
		}
	}

	return nil
}

func (m *ChartChart) validateTemplate(formats strfmt.Registry) error {

	if swag.IsZero(m.Template) { // not required
		return nil
	}

	if m.Template != nil {

		if err := m.Template.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Template")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ChartChart) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChartChart) UnmarshalBinary(b []byte) error {
	var res ChartChart
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
