// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ReleaseMetadata release metadata
// swagger:model release.Metadata
type ReleaseMetadata struct {

	// annotations
	Annotations *ReleaseMetadataAnnotations `json:"Annotations,omitempty"`

	// Api version
	APIVersion string `json:"ApiVersion,omitempty"`

	// app version
	AppVersion string `json:"AppVersion,omitempty"`

	// deprecated
	Deprecated bool `json:"Deprecated,omitempty"`

	// description
	Description string `json:"Description,omitempty"`

	// engine
	Engine string `json:"Engine,omitempty"`

	// home
	Home string `json:"Home,omitempty"`

	// icon
	Icon string `json:"Icon,omitempty"`

	// keywords
	Keywords []string `json:"Keywords"`

	// kube version
	KubeVersion string `json:"KubeVersion,omitempty"`

	// maintainer
	Maintainer *ReleaseMaintainer `json:"Maintainer,omitempty"`

	// name
	Name string `json:"Name,omitempty"`

	// sources
	Sources string `json:"Sources,omitempty"`

	// tags
	Tags string `json:"Tags,omitempty"`

	// tiller version
	TillerVersion string `json:"TillerVersion,omitempty"`
}

// Validate validates this release metadata
func (m *ReleaseMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAnnotations(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateKeywords(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMaintainer(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReleaseMetadata) validateAnnotations(formats strfmt.Registry) error {

	if swag.IsZero(m.Annotations) { // not required
		return nil
	}

	if m.Annotations != nil {

		if err := m.Annotations.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Annotations")
			}
			return err
		}
	}

	return nil
}

func (m *ReleaseMetadata) validateKeywords(formats strfmt.Registry) error {

	if swag.IsZero(m.Keywords) { // not required
		return nil
	}

	return nil
}

func (m *ReleaseMetadata) validateMaintainer(formats strfmt.Registry) error {

	if swag.IsZero(m.Maintainer) { // not required
		return nil
	}

	if m.Maintainer != nil {

		if err := m.Maintainer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Maintainer")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReleaseMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReleaseMetadata) UnmarshalBinary(b []byte) error {
	var res ReleaseMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
