// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReleaseStatus release status
// swagger:model release.Status
type ReleaseStatus struct {

	// code
	Code string `json:"Code,omitempty"`

	// last test suite run
	LastTestSuiteRun *ReleaseTestSuite `json:"LastTestSuiteRun,omitempty"`

	// notes
	Notes string `json:"Notes,omitempty"`

	// resources
	Resources string `json:"Resources,omitempty"`
}

// Validate validates this release status
func (m *ReleaseStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLastTestSuiteRun(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var releaseStatusTypeCodePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["UNKNOWN","DEPLOYED","DELETED","SUSPENDED","FAILED","DELETING","PENDING_INSTALL","PENDING_UPGRADE","PENDING_ROLLBACK"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		releaseStatusTypeCodePropEnum = append(releaseStatusTypeCodePropEnum, v)
	}
}

const (
	// ReleaseStatusCodeUNKNOWN captures enum value "UNKNOWN"
	ReleaseStatusCodeUNKNOWN string = "UNKNOWN"
	// ReleaseStatusCodeDEPLOYED captures enum value "DEPLOYED"
	ReleaseStatusCodeDEPLOYED string = "DEPLOYED"
	// ReleaseStatusCodeDELETED captures enum value "DELETED"
	ReleaseStatusCodeDELETED string = "DELETED"
	// ReleaseStatusCodeSUSPENDED captures enum value "SUSPENDED"
	ReleaseStatusCodeSUSPENDED string = "SUSPENDED"
	// ReleaseStatusCodeFAILED captures enum value "FAILED"
	ReleaseStatusCodeFAILED string = "FAILED"
	// ReleaseStatusCodeDELETING captures enum value "DELETING"
	ReleaseStatusCodeDELETING string = "DELETING"
	// ReleaseStatusCodePENDINGINSTALL captures enum value "PENDING_INSTALL"
	ReleaseStatusCodePENDINGINSTALL string = "PENDING_INSTALL"
	// ReleaseStatusCodePENDINGUPGRADE captures enum value "PENDING_UPGRADE"
	ReleaseStatusCodePENDINGUPGRADE string = "PENDING_UPGRADE"
	// ReleaseStatusCodePENDINGROLLBACK captures enum value "PENDING_ROLLBACK"
	ReleaseStatusCodePENDINGROLLBACK string = "PENDING_ROLLBACK"
)

// prop value enum
func (m *ReleaseStatus) validateCodeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, releaseStatusTypeCodePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ReleaseStatus) validateCode(formats strfmt.Registry) error {

	if swag.IsZero(m.Code) { // not required
		return nil
	}

	// value enum
	if err := m.validateCodeEnum("Code", "body", m.Code); err != nil {
		return err
	}

	return nil
}

func (m *ReleaseStatus) validateLastTestSuiteRun(formats strfmt.Registry) error {

	if swag.IsZero(m.LastTestSuiteRun) { // not required
		return nil
	}

	if m.LastTestSuiteRun != nil {

		if err := m.LastTestSuiteRun.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LastTestSuiteRun")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReleaseStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReleaseStatus) UnmarshalBinary(b []byte) error {
	var res ReleaseStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
