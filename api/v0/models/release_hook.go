// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReleaseHook release hook
// swagger:model release.Hook
type ReleaseHook struct {

	// delete policies
	DeletePolicies []string `json:"DeletePolicies"`

	// events
	Events []string `json:"Events"`

	// kind
	Kind string `json:"Kind,omitempty"`

	// last run
	LastRun strfmt.DateTime `json:"LastRun,omitempty"`

	// manifest
	Manifest string `json:"Manifest,omitempty"`

	// name
	Name string `json:"Name,omitempty"`

	// path
	Path string `json:"Path,omitempty"`

	// weight
	Weight int32 `json:"Weight,omitempty"`
}

// Validate validates this release hook
func (m *ReleaseHook) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeletePolicies(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEvents(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var releaseHookDeletePoliciesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SUCCEEDED","FAILED","BEFORE_HOOK_CREATION"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		releaseHookDeletePoliciesItemsEnum = append(releaseHookDeletePoliciesItemsEnum, v)
	}
}

func (m *ReleaseHook) validateDeletePoliciesItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, releaseHookDeletePoliciesItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *ReleaseHook) validateDeletePolicies(formats strfmt.Registry) error {

	if swag.IsZero(m.DeletePolicies) { // not required
		return nil
	}

	for i := 0; i < len(m.DeletePolicies); i++ {

		// value enum
		if err := m.validateDeletePoliciesItemsEnum("DeletePolicies"+"."+strconv.Itoa(i), "body", m.DeletePolicies[i]); err != nil {
			return err
		}

	}

	return nil
}

var releaseHookEventsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["UNKNOWN","PRE_INSTALL","POST_INSTALL","PRE_DELETE","POST_DELETE","PRE_UPGRADE","POST_UPGRADE","PRE_ROLLBACK","POST_ROLLBACK","RELEASE_TEST_SUCCESS","RELEASE_TEST_FAILURE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		releaseHookEventsItemsEnum = append(releaseHookEventsItemsEnum, v)
	}
}

func (m *ReleaseHook) validateEventsItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, releaseHookEventsItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *ReleaseHook) validateEvents(formats strfmt.Registry) error {

	if swag.IsZero(m.Events) { // not required
		return nil
	}

	for i := 0; i < len(m.Events); i++ {

		// value enum
		if err := m.validateEventsItemsEnum("Events"+"."+strconv.Itoa(i), "body", m.Events[i]); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReleaseHook) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReleaseHook) UnmarshalBinary(b []byte) error {
	var res ReleaseHook
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
